import ILoader from './ILoader';
import Header from './utils/Header';
import EncodedOutput from './utils/EncodedOutput';
import { loadersTypeId } from '@voyager-edsound/constants';
import { asciiToBytes, bytesToAscii } from '@voyager-edsound/core';

class ASCIIText implements ILoader<string> {
  public header: Header = new Header(loadersTypeId.ASCII_TEXT);

  /**
   * ASCIIText Loader - encoder and decoder. You can use it for handle with
   * ascii characters.
   *
   * The header is storing one parameter:
   * typeId: 1 byte
   */
  constructor() {}

  /**
   * Converts ASCII-UTF8 text to bits
   * @param text ASCII text format (UTF8)
   */
  encode(text: string): EncodedOutput {
    let asciiByteArray = asciiToBytes(text);
    return new EncodedOutput(this.header, asciiByteArray);
  }

  /**
   * Converts bytes containing ASCII-UTF8 characters data to ASCII format itself
   * @param bytes bytes containing the data
   */
  decode(bytes: Uint8Array) {
    // Check typeId
    const typeId = bytes[0];
    if (typeId !== this.header.getHeaderTypeId()) {
      throw new Error(
        'This is not a audio file generated by ASCIIText loader.'
      );
    }

    // ASCII byte array
    const asciiDataByteArray: Array<number> = [];
    bytes.slice(1).forEach((byte) => asciiDataByteArray.push(byte));

    return bytesToAscii(asciiDataByteArray);
  }
}

export default ASCIIText;
