import { promises } from 'fs';
import getBytesFromBuffer from '@voyager-edsound/core/getBytesFromBuffer';
import readBytes from '@voyager-edsound/core/readBytes';
import {
  TYPE_ID_BITS_SIZE,
  WAV_HEADER_BYTES_SIZE,
} from '@voyager-edsound/constants';

interface IReader {
  loadFileHeaderTypeId: (fileDir: string) => Promise<number>;
  loadBufferHeaderTypeId: (buffer: Buffer) => number;
  getBytesFromFile: (fileDir: string) => Promise<Uint8Array>;
  getBytesFromBuffer: (buffer: Buffer) => Promise<Uint8Array>;
}

class Reader implements IReader {
  /**
   * Reads WAV file generated by this software and return
   * the founded bits.
   */
  constructor() {}

  /**
   * Load byte containing the Loader TypeId information. Can be used to know how to decode the information
   * @param fileDir File directory to have its header loaded
   */
  loadFileHeaderTypeId = async (fileDir: string) => {
    const typeIdByte = await readBytes(fileDir, TYPE_ID_BITS_SIZE);
    return typeIdByte[0];
  };

  /**
   * Load bits containing the Loader TypeId information. Can be used to know how to decode the information
   * @param buffer File buffer to have its header loaded
   */
  loadBufferHeaderTypeId = (buffer: Buffer) => {
    return buffer[WAV_HEADER_BYTES_SIZE + 1];
  };

  /**
   * Reads bits located into the buffer and return it.
   * @param {Buffer} buffer Buffer that will be decoded to obtain the bits
   */
  getBytesFromBuffer = async (buffer: Buffer) => {
    return getBytesFromBuffer(buffer);
  };

  /**
   * The pure way to load the full file bytes at once.
   * @param {string} fileDir File directory to be loaded
   */
  getBytesFromFile = async (fileDir: string) => {
    const { readFile } = promises;
    const buffer = await readFile(fileDir);
    return await getBytesFromBuffer(buffer);
  };
}

export default Reader;
